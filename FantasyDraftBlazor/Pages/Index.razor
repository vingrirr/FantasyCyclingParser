@page "/"

@using FantasyDraftBlazor.Data
@using Microsoft.AspNetCore.SignalR.Client
@using FantasyCyclingParser;
@inject NavigationManager NavManager
@inject RiderService RiderService
@implements IAsyncDisposable


<PageTitle>Fantasy Cycling Draft</PageTitle>
<link rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

<style>
    #div1 {
        width: 350px;
        height: 70px;
        padding: 10px;
        border: 1px solid #aaaaaa;
    }
</style>


<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>
<MatButton Unelevated="true" @onclick="Send" disabled="@(IsConnected == false)">Send</MatButton>
<img class="animate__animated animate__backOutLeft animate__delay-2s" src="data:image;base64,@System.Convert.ToBase64String(photo.Image)" />
<hr />
<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <DraftContainer RiderList="AvailableRiders" OnTimerUpdated="HandleTimerUpdated" OnStatusUpdated="HandleStatusUpdated">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                    <Timer></Timer>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <DraftRiderList ></DraftRiderList>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <DraftTeam Team="DraftTeam"></DraftTeam>
                </div>
                <div style="display:none" class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <DraftTeam Team="DraftTeam2"></DraftTeam>
                </div>
            </DraftContainer>
        </div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">

        </div>
    </div>
</div>



<div id="div1" ondrop="drop(event)" ondragover="allowDrop(event)"></div>

<table id="myTable" class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Points</th>
        </tr>
    </thead>
    <tbody>

        <tr>
            <td>blah blah </td>
            <td>100</td>
        </tr>

    </tbody>
</table>
@*<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">asdfff</div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">fasdfadf</div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">daaaa</div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">dddd</div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">fff</div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">ssss</div>
        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-8">fasdfadfasdf</div>
    </div>
</div>*@
<hr />
<ul>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {

    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;
    private RiderPhoto photo;
    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/drafthub"))
            .WithAutomaticReconnect()
            .Build();

        photo = await RiderService.GetPhotoAsync();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formattedMessage = $"{user}: {message}";
            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}